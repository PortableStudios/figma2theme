// AUTO-GENERATED - File generated by figma2theme <%- version %>, manual edits may be overwritten
// Generated from Figma file https://www.figma.com/file/<%- figmaFileKey %>
// <%- new Date().toString() %>

import defaultTheme from '@chakra-ui/theme';

/**
 * Foundations
 */

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const breakpoints: any = <%- JSON.stringify(Object.values(chakra.breakpoints)) %>;
breakpoints.sm = breakpoints[0];
breakpoints.md = breakpoints[1];
breakpoints.lg = breakpoints[2];
breakpoints.xl = breakpoints[3];

const colors = <%- JSON.stringify(chakra.colours) %>;
export type Colors = typeof colors;

const radii = <%- JSON.stringify(chakra.radii) %>;
export type Radii = typeof radii;

const shadows = <%- JSON.stringify(chakra.shadows) %>;
export type Shadows = typeof shadows;

const spaces = <%- JSON.stringify(chakra.spacing) %>;
export type Spaces = typeof spaces;

const sizes = {
  ...spaces,
  ...<%- JSON.stringify(chakra.sizes) %>,
  container: {
    sm: '640px',
    md: '768px',
    lg: '1024px',
    xl: '1280px',
  }
}
export type Sizes = typeof sizes;

const typography = {
  letterSpacings: <%- JSON.stringify(chakra.typography.letterSpacing) %>,
  lineHeights: <%- JSON.stringify(chakra.typography.lineHeights) %>,
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900,
  },
  fonts: <%- JSON.stringify(chakra.typography.fonts) %>,
  fontSizes: <%- JSON.stringify(chakra.typography.fontSizes) %>,
};
export type Typography = typeof typography;

/**
 * Variants
 */

const textVariants = <%- JSON.stringify(chakra.textVariants) %>;
export type TextVariants = typeof textVariants;

const headingVariants = <%- JSON.stringify(chakra.headingVariants) %>;
export type HeadingVariants = typeof headingVariants;

 /**
 * Theme
 */

const theme = {
  ...defaultTheme,
  components: {
    ...defaultTheme.components,
    Heading: {
      ...defaultTheme.components.Heading,
      variants: headingVariants,
      defaultProps: {
        ...defaultTheme.components.Heading.defaultProps,
        size: undefined,
      },
    },
    Text: {
      variants: textVariants,
    }
  },
  breakpoints: breakpoints,
  colors: {
    ...defaultTheme.colors,
    custom: colors,
  },
  radii: radii,
  // shadows: shadows,
  space: spaces,
  sizes: sizes,
  fonts: typography.fonts,
  fontSizes: typography.fontSizes,
  fontWeights: typography.fontWeights,
  lineHeights: typography.lineHeights,
  letterSpacings: typography.letterSpacings,
};
export type Theme = typeof theme;

export default theme;
